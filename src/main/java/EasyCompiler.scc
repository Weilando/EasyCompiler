Helpers
    all_unicode_chars = [0x0000 .. 0xffff];
    space  = ' ';

    // Control characters
    ht = 0x0009; // tab stop
    lf = 0x000a; // new line
    cr = 0x000d; // new line
    line_terminator = lf | cr | cr lf;

    not_star           = [all_unicode_chars - '*'];
    not_star_not_slash = [all_unicode_chars - ['*' + '/']];
    not_quotation_mark = [all_unicode_chars - '"'];

    letter          = [['a' .. 'z'] + ['A' .. 'Z']];
    digit           = ['0' .. '9'];
    non_zero_digit  = ['1' .. '9'];

    easy_float            = digit+ '.' digit+;
    easy_int              = '0' | non_zero_digit digit*;
    easy_letter           = letter | '$' | '_';
    easy_letter_or_digit  = easy_letter | digit;
    easy_string           = ('"' (not_quotation_mark)* '"');

    end_of_line_comment = '//' [all_unicode_chars - [lf + cr]]* line_terminator;
    traditional_comment = '/*' not_star* ('*' (not_star_not_slash not_star*)?)* '*/';


Tokens
    // Type keywords
    boolean_key = 'boolean';
    float_key   = 'float';
    int_key     = 'int';
    string_key  = 'string';
    none_key    = 'none';

    // Control flow keywords
    if_key      = 'if';
    else_key    = 'else';
    while_key   = 'while';
    return_key  = 'return';

    // Identifiers
    main_id     = 'main';
    print_id    = 'print';
    println_id  = 'println';

    // Basic tokens
    blank       = (space | line_terminator)+;
    l_par       = '(';
    r_par       = ')';
    l_brace     = '{';
    r_brace     = '}';
    equals      = '=';
    semicolon   = ';';
    comma       = ',';
    dot         = '.';
    l_arrow     = '<-';

    // Arithmetic operators
    plus  = '+';
    minus = '-';
    mult  = '*';
    div   = '/';
    mod   = '%';

    // Comparison operators
    eq      = '==';
    lteq    = '<=';
    gteq    = '>=';
    neq     = '!=';
    lt      = '<';
    gt      = '>';

    // Boolean operators
    and   = '&&';
    or    = '||';
    not   = '!';
    dnot  = '!!'; // double not, can be ignored

    // String operators
    concat = 'ยง';

    // Literals
    boolean_literal = 'true' | 'false';
    float_literal   = easy_float;
    int_literal     = easy_int;
    string_literal  = easy_string;

    // Comments
    comment = traditional_comment | end_of_line_comment;

    // General identifier
    identifier  = easy_letter easy_letter_or_digit*;


Ignored Tokens
    blank, comment, dnot;


/* Concrete name vs. abstract name
* easy_compilation_unit -> prg
* main_function -> main
* function -> func
* type -> tp
* return_type -> rtp
* statement -> stat
* expression -> expr
*/
Productions
    // Outer program (has no form)
    easy_compilation_unit {-> prg} =
        function_definition* main_function  {-> New prg([function_definition.func], main_function.main)};

    // Literals
    literal {-> expr} =
        {boolean}  boolean_literal  {-> New expr.boolean(boolean_literal)}
      | {float}    float_literal    {-> New expr.float(float_literal)}
      | {int}      int_literal      {-> New expr.int(int_literal)}
      | {string}   string_literal   {-> New expr.string(string_literal)};

    // Types
    type {-> tp} =
        {boolean}  boolean_key  {-> New tp.boolean()}
      | {float}    float_key    {-> New tp.float()}
      | {int}      int_key      {-> New tp.int()}
      | {string}   string_key   {-> New tp.string()};

    return_type {-> rtp} =
        {boolean}  boolean_key  {-> New rtp.boolean()}
      | {float}    float_key    {-> New rtp.float()}
      | {int}      int_key      {-> New rtp.int()}
      | {none}     none_key     {-> New rtp.none()}
      | {string}   string_key   {-> New rtp.string()};

    // Functions
    argument {-> arg} =
        {declaration}  type [id]:identifier  {-> New arg.decl(id, type.tp)};

    argument_declarations { -> arg* } = 
        {single}      argument                                     { -> [argument.arg] }
        | {multiple}  argument comma [rest]:argument_declarations  { -> [argument.arg, rest.arg] };

    main_function {-> main} =
        none_key l_arrow main_id l_par r_par
        l_brace [declarations]:declaration_statement* [body]:statement* r_brace
        {-> New main([declarations.stat], [body.stat])};

    function_definition {-> func} =
        return_type l_arrow [name]:identifier l_par [args]:argument_declarations? r_par
        l_brace [var_decls]:declaration_statement* [body]:statement* r_brace
        {-> New func(return_type.rtp, name, [args.arg], [var_decls.stat], [body.stat])};

    expression_list { -> expr* } = 
        {single}      [exp]:expression                               { -> [exp.expr] }
        | {multiple}  [exp]:expression comma [rest]:expression_list  { -> [exp.expr, rest.expr] };


    // Variables
    // Only local variables declared at the beginning of functions are allowed (i.e., modifiers are not necessary).
    declaration_statement {-> stat} =
        {declaration}     type [id]:identifier semicolon                    {-> New stat.decl(id, type.tp) }
      | {initialization}  type [id]:identifier equals expression semicolon  {-> New stat.init(id, type.tp, expression.expr)};

    variable_assignment {-> stat} =
        [id]:identifier equals [expr]:expression semicolon {-> New stat.assign(id, expr.expr)};

    // Blocks
    block {-> stat}=
        l_brace [statements]:statement* r_brace {-> New stat.block([statements.stat])};

    // Statements
    // Solution of the dangling-else-problem with while statements from https://en.wikipedia.org/wiki/Dangling_else#Avoiding_the_conflict_in_LR_parsers
    statement {-> stat} =
        {open}    open_statement    {-> open_statement.stat}
      | {closed}  closed_statement  {-> closed_statement.stat} ;

    open_statement {-> stat} =
        {if}          if_key l_par [expr]:expression r_par [then]:statement                                        {-> New stat.if(expr.expr, then.stat)}
      | {if_else}     if_key l_par [expr]:expression r_par [then]:closed_statement else_key [else]:open_statement  {-> New stat.ifelse(expr.expr, then.stat, else.stat)}
      | {while_open}  while_key l_par [expr]:expression r_par [body]:open_statement                                {-> New stat.while(expr.expr, body.stat)};

    closed_statement {-> stat} =
        {simple}        simple_statement                                                                               {-> simple_statement.stat}
      | {if_closed}     if_key l_par [expr]:expression r_par [then]:closed_statement else_key [else]:closed_statement  {-> New stat.ifelse(expr.expr, then.stat, else.stat)}
      | {while_closed}  while_key l_par [expr]:expression r_par [body]:closed_statement                                {-> New stat.while(expr.expr, body.stat)};

    simple_statement {-> stat} =
        {block}                block                {-> block.stat}
      | {function_statement}   function_statement   {-> function_statement.stat}
      | {empty}                semicolon            {-> New stat.empty()}
      | {print_statement}      print_statement      {-> print_statement.stat}
      | {println_statement}    println_statement    {-> println_statement.stat}
      | {return_statement}     return_statement     {-> return_statement.stat}
      | {variable_assignment}  variable_assignment  {-> variable_assignment.stat};

    function_statement {-> stat} =
        [id]:identifier l_par [args]:expression_list? r_par semicolon {-> New stat.func(id, [args.expr])};

    print_statement {-> stat} =
        print_id l_par [expr]:expression r_par semicolon {-> New stat.print(expr.expr)};

    println_statement {-> stat} =
        println_id l_par [expr]:expression r_par semicolon {-> New stat.println(expr.expr)};

    return_statement {-> stat} =
        return_key [expr]:expression? semicolon {-> New stat.return(expr.expr)};

    // Expressions
    term {-> expr} =
        {boolean}   boolean_literal                                        {-> New expr.boolean(boolean_literal)}
      | {float}     float_literal                                          {-> New expr.float(float_literal)}
      | {function}  [name]:identifier l_par [args]:expression_list? r_par  {-> New expr.func(name, [args.expr])}
      | {int}       int_literal                                            {-> New expr.int(int_literal)}
      | {string}    string_literal                                         {-> New expr.string(string_literal)}
      | {id}        [id]:identifier                                        {-> New expr.id(id)}
      | {expr}      l_par expression r_par                                 {-> expression.expr};

    unary_expression {-> expr} =
        {minus} minus term  {-> New expr.uminus(term.expr)}
      | {not}   not term    {-> New expr.not(term.expr)}
      | {plus}  plus term   {-> New expr.uplus(term.expr)}
      | {term}  term        {-> term.expr};

    multiplicative_expression {-> expr} =
        {div}    [left]:multiplicative_expression div  [right]:unary_expression  {-> New expr.div(left.expr, right.expr)}
      | {mod}    [left]:multiplicative_expression mod  [right]:unary_expression  {-> New expr.mod(left.expr, right.expr)}
      | {mul}    [left]:multiplicative_expression mult [right]:unary_expression  {-> New expr.mul(left.expr, right.expr)}
      | {unary}  unary_expression                                                {-> unary_expression.expr};

    additive_expression {-> expr} =
        {add}             [left]:additive_expression plus  [right]:multiplicative_expression  {-> New expr.add(left.expr, right.expr)}
      | {concat}          [left]:additive_expression concat [right]:multiplicative_expression {-> New expr.concat(left.expr, right.expr)}
      | {sub}             [left]:additive_expression minus [right]:multiplicative_expression  {-> New expr.sub(left.expr, right.expr)}
      | {multiplicative}  multiplicative_expression                                           {-> multiplicative_expression.expr};

    comparison_expression {-> expr} =
        {lt}        [left]:comparison_expression lt [right]:additive_expression    {-> New expr.lt(left.expr, right.expr)}
      | {gt}        [left]:comparison_expression gt [right]:additive_expression    {-> New expr.gt(left.expr, right.expr)}
      | {lteq}      [left]:comparison_expression lteq [right]:additive_expression  {-> New expr.lteq(left.expr, right.expr)}
      | {gteq}      [left]:comparison_expression gteq [right]:additive_expression  {-> New expr.gteq(left.expr, right.expr)}
      | {additive}  additive_expression                                            {-> additive_expression.expr};

    equality_expression {-> expr} =
        {eq}          [left]:equality_expression eq [right]:comparison_expression   {-> New expr.eq(left.expr, right.expr)}
      | {neq}         [left]:equality_expression neq [right]:comparison_expression  {-> New expr.neq(left.expr, right.expr)}
      | {comparison}  comparison_expression                                         {-> comparison_expression.expr};

    and_expression {-> expr} =
        {and}       [left]:and_expression and [right]:equality_expression  {-> New expr.and(left.expr, right.expr)}
      | {equality}  equality_expression                                    {-> equality_expression.expr};

    or_expression {-> expr} =
        {or}   [left]:or_expression or [right]:and_expression  {-> New expr.or(left.expr, right.expr)}
      | {and}  and_expression                                  {-> and_expression.expr};

    expression {-> expr} =
        or_expression {-> or_expression.expr};


Abstract Syntax Tree
    prg = func* main;

    main = [declarations]:stat* [statements]:stat*;
    func = [return_type]:rtp [id]:identifier [args]:arg* [declarations]:stat* [statements]:stat*;

    tp   = {boolean} | {float} | {int} | {string};
    rtp  = {boolean} | {float} | {int} | {none} | {string};
    arg = {decl} [id]:identifier [type]:tp;

    stat =
        {assign}  [id]:identifier [expr]:expr
      | {block}   [body]:stat*
      | {func}    [id]:identifier [args]:expr*
      | {decl}    [id]:identifier [type]:tp
      | {empty}
      | {if}      [expr]:expr [then_block]:stat
      | {ifelse}  [expr]:expr [then_block]:stat [else_block]:stat
      | {init}    [id]:identifier [type]:tp [expr]:expr
      | {print}   [expr]:expr
      | {println} [expr]:expr
      | {return}  [expr]:expr?
      | {while}   [expr]:expr [body]:stat;

    expr =
      {boolean}   [lit]:boolean_literal
      | {float}   [lit]:float_literal
      | {func}    [id]:identifier [args]:expr*
      | {int}     [lit]:int_literal
      | {none}    [lit]:none_key
      | {string}  [lit]:string_literal
      | {id}      [id]:identifier
      | {not}     [expr]:expr
      | {uminus}  [expr]:expr
      | {uplus}   [expr]:expr
      | {add}     [left]:expr [right]:expr
      | {concat}  [left]:expr [right]:expr
      | {sub}     [left]:expr [right]:expr
      | {div}     [left]:expr [right]:expr
      | {mul}     [left]:expr [right]:expr
      | {mod}     [left]:expr [right]:expr
      | {lt}      [left]:expr [right]:expr
      | {gt}      [left]:expr [right]:expr
      | {lteq}    [left]:expr [right]:expr
      | {gteq}    [left]:expr [right]:expr
      | {eq}      [left]:expr [right]:expr
      | {neq}     [left]:expr [right]:expr
      | {and}     [left]:expr [right]:expr
      | {or}      [left]:expr [right]:expr;
