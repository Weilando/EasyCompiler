Helpers
    all_unicode_chars = [0x0000 .. 0xffff];
    space  = ' ';

    // Control characters
    ht = 0x0009; // tab stop
    lf = 0x000a; // new line
    cr = 0x000d; // new line
    line_terminator = lf | cr | cr lf;

    not_star = [all_unicode_chars - '*'];
    not_star_not_slash = [all_unicode_chars - ['*' + '/']];

    letter          = [['a' .. 'z'] + ['A' .. 'Z']];
    digit           = ['0' .. '9'];
    non_zero_digit  = ['1' .. '9'];

    easy_float            = digit+ '.' digit+;
    easy_int              = '0' | non_zero_digit digit*;
    easy_letter           = letter | '$' | '_';
    easy_letter_or_digit  = easy_letter | digit;

    end_of_line_comment = '//' [all_unicode_chars - [lf + cr]]* line_terminator;
    traditional_comment = '/*' not_star* ('*' (not_star_not_slash not_star*)?)* '*/';


Tokens
    // Keywords
    boolean_key = 'boolean';
    float_key   = 'float';
    int_key     = 'int';
    void_key    = 'void';
    if_key      = 'if';
    else_key    = 'else';
    while_key   = 'while';

    // Identifiers
    main_id     = 'main';
    print_id    = 'print';
    println_id  = 'println';

    // Basic tokens
    blank       = (space | line_terminator)+;
    l_par       = '(';
    r_par       = ')';
    l_brace     = '{';
    r_brace     = '}';
    equals      = '=';
    semicolon   = ';';
    comma       = ',';
    dot         = '.';

    // Arithmetic operators
    plus  = '+';
    minus = '-';
    mult  = '*';
    div   = '/';
    mod   = '%';

    // Comparison operators
    eq      = '==';
    lteq    = '<=';
    gteq    = '>=';
    neq     = '!=';
    lt      = '<';
    gt      = '>';

    // Boolean operators
    and   = '&&';
    or    = '||';
    not   = '!';
    dnot  = '!!'; // double not, can be ignored

    // Literals
    boolean_literal = 'true' | 'false';
    float_literal   = easy_float;
    int_literal     = easy_int;

    // Comments
    comment = traditional_comment | end_of_line_comment;

    // General identifier
    identifier  = easy_letter easy_letter_or_digit*;


Ignored Tokens
    blank, comment, dnot;


/* Concrete name vs. abstract name
* class -> cls
* main_method -> main
* type -> tp
* statement -> stat
* expression -> expr
*/
Productions
    // Outer program (has no form)
    easy_compilation_unit {-> prg} =
        main_method {-> New prg(main_method.main)};

    // Literals
    literal {-> expr} =
        {boolean} boolean_literal {-> New expr.boolean(boolean_literal)}
      | {float} float_literal {-> New expr.float(float_literal)}
      | {int} int_literal {-> New expr.int(int_literal)};

    // Types
    type {-> tp} =
        {boolean} boolean_key {-> New tp.boolean()}
      | {float} float_key {-> New tp.float()}
      | {int} int_key {-> New tp.int()};

    // Main method
    main_method {-> main} =
        void_key main_id l_par r_par
        l_brace [declarations]:variable_declaration_statement* [body]:statement* r_brace {-> New main([declarations.stat], [body.stat])};

    // Variables
    // Only local variables declared at the beginning of main are allowed (i.e. modifiers are not necessary).
    variable_declaration_statement {-> stat} =
        {declaration} type [id]:identifier semicolon {-> New stat.decl(type.tp, id)}
      | {initialization} type [id]:identifier equals expression semicolon {-> New stat.init(type.tp, id, expression.expr)};

    variable_assignment {-> stat} =
        [id]:identifier equals [expr]:expression semicolon {-> New stat.assign(id, expr.expr)};

    // Blocks
    block {-> stat}=
        l_brace [statements]:statement* r_brace {-> New stat.block([statements.stat])};

    // Statements
    // Solution of the dangling-else-problem with while statements from https://en.wikipedia.org/wiki/Dangling_else#Avoiding_the_conflict_in_LR_parsers
    statement {-> stat} =
        {open} open_statement {-> open_statement.stat}
      | {closed} closed_statement {-> closed_statement.stat} ;

    open_statement {-> stat} =
        {if} if_key l_par [expr]:expression r_par [then]:statement {-> New stat.if(expr.expr, then.stat)}
      | {if_else} if_key l_par [expr]:expression r_par [then]:closed_statement else_key [else]:open_statement {-> New stat.ifelse(expr.expr, then.stat, else.stat)}
      | {while_open} while_key l_par [expr]:expression r_par [body]:open_statement {-> New stat.while(expr.expr, body.stat)};

    closed_statement {-> stat} =
        {simple} simple_statement {-> simple_statement.stat}
      | {if_closed} if_key l_par [expr]:expression r_par [then]:closed_statement else_key [else]:closed_statement {-> New stat.ifelse(expr.expr, then.stat, else.stat)}
      | {while_closed} while_key l_par [expr]:expression r_par [body]:closed_statement {-> New stat.while(expr.expr, body.stat)};

    simple_statement {-> stat} =
        {variable_assignment} variable_assignment {-> variable_assignment.stat}
      | {print_statement} print_statement {-> print_statement.stat}
      | {println_statement} println_statement {-> println_statement.stat}
      | {block} block {-> block.stat}
      | {empty} semicolon {-> New stat.empty()};

    print_statement {-> stat} =
        print_id l_par [expr]:expression r_par semicolon {-> New stat.print(expr.expr)};

    println_statement {-> stat} =
        println_id l_par [expr]:expression r_par semicolon {-> New stat.println(expr.expr)};

    // Expressions
    expression {-> expr} =
        or_expression {-> or_expression.expr};

    unary_expression {-> expr} =
        {not} not term {-> New expr.not(term.expr)}
      | {plus} plus term {-> New expr.uplus(term.expr)}
      | {minus} minus term {-> New expr.uminus(term.expr)}
      | {term} term {-> term.expr};

    additive_expression {-> expr} =
        {plus}  [left]:additive_expression plus  [right]:multiplicative_expression {-> New expr.plus(left.expr, right.expr)}
      | {minus} [left]:additive_expression minus [right]:multiplicative_expression {-> New expr.minus(left.expr, right.expr)}
      | {multiplicative_expression} multiplicative_expression {-> multiplicative_expression.expr};

    multiplicative_expression {-> expr} =
        {mod}  [left]:multiplicative_expression mod  [right]:unary_expression {-> New expr.mod(left.expr, right.expr)}
      | {mult} [left]:multiplicative_expression mult [right]:unary_expression {-> New expr.mult(left.expr, right.expr)}
      | {div}  [left]:multiplicative_expression div  [right]:unary_expression {-> New expr.div(left.expr, right.expr)}
      | {unary} unary_expression {-> unary_expression.expr};

    comparison_expression {-> expr} =
        {lt} [left]:comparison_expression lt [right]:additive_expression {-> New expr.lt(left.expr, right.expr)}
      | {gt} [left]:comparison_expression gt [right]:additive_expression {-> New expr.gt(left.expr, right.expr)}
      | {lteq} [left]:comparison_expression lteq [right]:additive_expression {-> New expr.lteq(left.expr, right.expr)}
      | {gteq} [left]:comparison_expression gteq [right]:additive_expression {-> New expr.gteq(left.expr, right.expr)}
      | {additive} additive_expression {-> additive_expression.expr};

    equality_expression {-> expr} =
        {eq} [left]:equality_expression eq [right]:comparison_expression {-> New expr.eq(left.expr, right.expr)}
      | {neq} [left]:equality_expression neq [right]:comparison_expression {-> New expr.neq(left.expr, right.expr)}
      | {comparison} comparison_expression {-> comparison_expression.expr};

    and_expression {-> expr} =
        {and} [left]:and_expression and [right]:equality_expression {-> New expr.and(left.expr, right.expr)}
      | {equality} equality_expression {-> equality_expression.expr};

    or_expression {-> expr} =
        {or} [left]:or_expression or [right]:and_expression {-> New expr.or(left.expr, right.expr)}
      | {and} and_expression {-> and_expression.expr};

    term {-> expr} =
        {boolean} boolean_literal {-> New expr.boolean(boolean_literal)}
      | {float} float_literal {-> New expr.float(float_literal)}
      | {int} int_literal {-> New expr.int(int_literal)}
      | {var_id} [id]:identifier {-> New expr.id(id)}
      | {expr} l_par expression r_par {-> expression.expr};


Abstract Syntax Tree
    prg = [main]:main;

    main = [declarations]:stat* [statements]:stat*;

    tp = {boolean} | {float} | {int};

    stat =
        {decl}    [type]:tp [id]:identifier
      | {init}    [type]:tp [id]:identifier [expr]:expr
      | {assign}  [id]:identifier [expr]:expr
      | {block}   [body]:stat*
      | {print}   [expr]:expr
      | {println} [expr]:expr
      | {while}   [expr]:expr [body]:stat
      | {if}      [expr]:expr [then_block]:stat
      | {ifelse}  [expr]:expr [then_block]:stat [else_block]:stat
      | {empty}   ;

    expr =
        {plus}    [left]:expr [right]:expr
      | {minus}   [left]:expr [right]:expr
      | {mod}     [left]:expr [right]:expr
      | {mult}    [left]:expr [right]:expr
      | {div}     [left]:expr [right]:expr
      | {or}      [left]:expr [right]:expr
      | {and}     [left]:expr [right]:expr
      | {eq}      [left]:expr [right]:expr
      | {neq}     [left]:expr [right]:expr
      | {lt}      [left]:expr [right]:expr
      | {gt}      [left]:expr [right]:expr
      | {lteq}    [left]:expr [right]:expr
      | {gteq}    [left]:expr [right]:expr
      | {not}     [expr]:expr
      | {uplus}   [expr]:expr
      | {uminus}  [expr]:expr
      | {boolean} [lit]:boolean_literal
      | {float}   [lit]:float_literal
      | {int}     [lit]:int_literal
      | {id}      [id]:identifier;
